<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	   default-lazy-init="false">


	<context:component-scan base-package="com.framework.spring.transactional.*"></context:component-scan>

	<!--配置dataSource  -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://119.23.51.116:3306/employees" />
		<property name="username" value="root" />
		<property name="password" value="w5571393#" />
	</bean>

	<!--配置sqlSessionFactory  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:com/framework/spring/transactional/test1/mapper/*.xml"/>
		<property name="configurationProperties">
			<props>
				<prop key="cacheEnabled">false</prop>
				<prop key="lazyLoadingEnabled">false</prop>
			</props>
		</property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<!--自动加载mapper -->
		<property name="basePackage" value="com.framework.spring.transactional.test1.dao"/>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--  =========================================[ 注解事务 ]=======================================================-->
	<!-- 开启注解式配置事物
	<tx:annotation-driven transaction-manager="transactionManager" />
	-->

	<!--  =========================================[ 使用拦截器 ]=======================================================-->
	<!--
		PROPAGATION_SUPPORTS:  如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行;
		PROPAGATION_MANDATORY: 使用当前事务, 如果没有, 则抛出异常;
		PROPAGATION_REQUIRED:  新建事务,如果当前有事务, 则挂起;
		PROPAGATION_NOT_SUPPORTED: 以非事务的方式执行, 如果当前有事务, 则挂起;
		PROPAGATION_NEVER: 以非事务的方式执行, 如果当前有事务,则抛出异常;
		+/-Exception : + 表示异常出现时事物提交, - 表示异常出现时事务回滚
	-->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="count*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="select*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="query*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="fetch*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="del*"> PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="merchantSendGoods"> PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="orderPaySucceed"> PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="hadReceivedOrder"> PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="cancel*"> PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="create*"> PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="log*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="valid*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean>

	<bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<value>*ServiceImpl</value>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>

	<!--  =========================================[ 使用TransactionProxyFactoryBean ]=======================================================
	<bean id="transactionProxyFactoryBean"  class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />

		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="mod*">PROPAGATION_REQUIRED</prop>
				<prop key="del*">PROPAGATION_REQUIRED</prop>
				<prop key="*">readOnly</prop>
			</props>
		</property>

		<property name="target">
			<bean class="com.framework.spring.transactional.test1.service.EmployeesServiceImpl">
				<property name="employeesMapper">
					<ref bean="employeesMapper"/>
				</property>
			</bean>
		</property>
	</bean>
	-->

</beans>